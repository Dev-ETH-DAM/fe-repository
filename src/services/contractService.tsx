
import { config } from "@/wagmi";
import { getWalletClient, getPublicClient } from "wagmi/actions";
import { Abi } from "abitype";
import { sapphireTestnet } from "viem/chains";
const StorageBytecode =
	"0x608060405234801561001057600080fd5b50610a6a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063467fba0f1461003b578063df9084eb14610057575b600080fd5b61005560048036038101906100509190610435565b610087565b005b610071600480360381019061006c91906104ad565b61016c565b60405161007e91906106e1565b60405180910390f35b600082604051610097919061073f565b908152602001604051809103902060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190816101659190610962565b5050505050565b606060008260405161017e919061073f565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156102d057838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201805461023f90610785565b80601f016020809104026020016040519081016040528092919081815260200182805461026b90610785565b80156102b85780601f1061028d576101008083540402835291602001916102b8565b820191906000526020600020905b81548152906001019060200180831161029b57829003601f168201915b505050505081525050815260200190600101906101ac565b505050509050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610342826102f9565b810181811067ffffffffffffffff821117156103615761036061030a565b5b80604052505050565b60006103746102db565b90506103808282610339565b919050565b600067ffffffffffffffff8211156103a05761039f61030a565b5b6103a9826102f9565b9050602081019050919050565b82818337600083830152505050565b60006103d86103d384610385565b61036a565b9050828152602081018484840111156103f4576103f36102f4565b5b6103ff8482856103b6565b509392505050565b600082601f83011261041c5761041b6102ef565b5b813561042c8482602086016103c5565b91505092915050565b6000806040838503121561044c5761044b6102e5565b5b600083013567ffffffffffffffff81111561046a576104696102ea565b5b61047685828601610407565b925050602083013567ffffffffffffffff811115610497576104966102ea565b5b6104a385828601610407565b9150509250929050565b6000602082840312156104c3576104c26102e5565b5b600082013567ffffffffffffffff8111156104e1576104e06102ea565b5b6104ed84828501610407565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061054d82610522565b9050919050565b61055d81610542565b82525050565b6000819050919050565b61057681610563565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105b657808201518184015260208101905061059b565b60008484015250505050565b60006105cd8261057c565b6105d78185610587565b93506105e7818560208601610598565b6105f0816102f9565b840191505092915050565b60006060830160008301516106136000860182610554565b506020830151610626602086018261056d565b506040830151848203604086015261063e82826105c2565b9150508091505092915050565b600061065783836105fb565b905092915050565b6000602082019050919050565b6000610677826104f6565b6106818185610501565b93508360208202850161069385610512565b8060005b858110156106cf57848403895281516106b0858261064b565b94506106bb8361065f565b925060208a01995050600181019050610697565b50829750879550505050505092915050565b600060208201905081810360008301526106fb818461066c565b905092915050565b600081905092915050565b60006107198261057c565b6107238185610703565b9350610733818560208601610598565b80840191505092915050565b600061074b828461070e565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061079d57607f821691505b6020821081036107b0576107af610756565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826107db565b61082286836107db565b95508019841693508086168417925050509392505050565b6000819050919050565b600061085f61085a61085584610563565b61083a565b610563565b9050919050565b6000819050919050565b61087983610844565b61088d61088582610866565b8484546107e8565b825550505050565b600090565b6108a2610895565b6108ad818484610870565b505050565b5b818110156108d1576108c660008261089a565b6001810190506108b3565b5050565b601f821115610916576108e7816107b6565b6108f0846107cb565b810160208510156108ff578190505b61091361090b856107cb565b8301826108b2565b50505b505050565b600082821c905092915050565b60006109396000198460080261091b565b1980831691505092915050565b60006109528383610928565b9150826002028217905092915050565b61096b8261057c565b67ffffffffffffffff8111156109845761098361030a565b5b61098e8254610785565b6109998282856108d5565b600060209050601f8311600181146109cc57600084156109ba578287015190505b6109c48582610946565b865550610a2c565b601f1984166109da866107b6565b60005b82811015610a02578489015182556001820191506020850194506020810190506109dd565b86831015610a1f5784890151610a1b601f891682610928565b8355505b6001600288020188555050505b50505050505056fea26469706673582212209cce1956b32aca58298bcfa382951a501678a532bac82136f68ca88d7cffddcf64736f6c63430008130033";

const StorageABI = [
	{
	  "inputs": [
		{
		  "internalType": "string",
		  "name": "topic",
		  "type": "string"
		}
	  ],
	  "name": "getMessages",
	  "outputs": [
		{
		  "components": [
			{
			  "internalType": "address",
			  "name": "sender",
			  "type": "address"
			},
			{
			  "internalType": "uint256",
			  "name": "timestamp",
			  "type": "uint256"
			},
			{
			  "internalType": "string",
			  "name": "content",
			  "type": "string"
			}
		  ],
		  "internalType": "struct ConfidentialChat.Message[]",
		  "name": "",
		  "type": "tuple[]"
		}
	  ],
	  "stateMutability": "view",
	  "type": "function"
	},
	{
	  "inputs": [
		{
		  "internalType": "string",
		  "name": "topic",
		  "type": "string"
		},
		{
		  "internalType": "string",
		  "name": "content",
		  "type": "string"
		}
	  ],
	  "name": "sendMessage",
	  "outputs": [],
	  "stateMutability": "nonpayable",
	  "type": "function"
	}
  ] as const satisfies Abi;


const publicClient = getPublicClient(config, { chainId: sapphireTestnet.id });

export async function deployStorageContract() {
	const walletClient = await getWalletClient(config);
	if (!walletClient) throw new Error("Wallet client not found");

	return walletClient.deployContract({
		abi: StorageABI,
		bytecode: StorageBytecode,
		args: [],
	});
}

export async function sendMessage(
	account: `0x${string}`,
	contractAddress: `0x${string}`,
	topic: string,
	content: string
) {
	const walletClient = await getWalletClient(config);
	if (!walletClient || !publicClient) throw new Error("Missing client(s)");

	const callArgs = {
		account,
		abi: StorageABI,
		address: contractAddress,
		functionName: "sendMessage",
		args: [topic, content],
	} as const;

	const gas = await publicClient.estimateContractGas(callArgs);
	return walletClient.writeContract({ ...callArgs, gas });
}

export async function getMessages(
	contractAddress: `0x${string}`,
	topic: string
) {
	if (!publicClient) throw new Error("No public client");

	return publicClient.readContract({
		abi: StorageABI,
		address: contractAddress,
		functionName: "getMessages",
		args: [topic],
	});
}

